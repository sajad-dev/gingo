// Code generated by MockGen. DO NOT EDIT.
// Source: accounts_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	table "github.com/sajad-dev/gingo/internal/db/table"
)

// MockAccountsDataAccses is a mock of AccountsDataAccses interface.
type MockAccountsDataAccses struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsDataAccsesMockRecorder
}

// MockAccountsDataAccsesMockRecorder is the mock recorder for MockAccountsDataAccses.
type MockAccountsDataAccsesMockRecorder struct {
	mock *MockAccountsDataAccses
}

// NewMockAccountsDataAccses creates a new mock instance.
func NewMockAccountsDataAccses(ctrl *gomock.Controller) *MockAccountsDataAccses {
	mock := &MockAccountsDataAccses{ctrl: ctrl}
	mock.recorder = &MockAccountsDataAccsesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsDataAccses) EXPECT() *MockAccountsDataAccsesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountsDataAccses) Create(ctx *gin.Context, fields table.Accounts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountsDataAccsesMockRecorder) Create(ctx, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountsDataAccses)(nil).Create), ctx, fields)
}

// Delete mocks base method.
func (m *MockAccountsDataAccses) Delete(ctx *gin.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountsDataAccsesMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountsDataAccses)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockAccountsDataAccses) GetAll(arg0 *gin.Context) ([]table.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]table.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAccountsDataAccsesMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAccountsDataAccses)(nil).GetAll), arg0)
}

// GetByID mocks base method.
func (m *MockAccountsDataAccses) GetByID(ctx *gin.Context, id int) (table.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(table.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAccountsDataAccsesMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAccountsDataAccses)(nil).GetByID), ctx, id)
}

// GetUserByFields mocks base method.
func (m *MockAccountsDataAccses) GetUserByFields(ctx *gin.Context, Qury map[string]any) (table.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByFields", ctx, Qury)
	ret0, _ := ret[0].(table.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByFields indicates an expected call of GetUserByFields.
func (mr *MockAccountsDataAccsesMockRecorder) GetUserByFields(ctx, Qury interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByFields", reflect.TypeOf((*MockAccountsDataAccses)(nil).GetUserByFields), ctx, Qury)
}

// Update mocks base method.
func (m *MockAccountsDataAccses) Update(ctx *gin.Context, field table.Accounts, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, field, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAccountsDataAccsesMockRecorder) Update(ctx, field, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountsDataAccses)(nil).Update), ctx, field, id)
}
